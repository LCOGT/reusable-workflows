# This workflow will:
# - build and push a docker image using  skaffold
# - always make a pull request in the deploy repo to update staging & auto merge it
# - on release tags (v...), also make a draft pull request to update prod

# It is designed to be called from the source repo.

name: Continuous Deployment

on:
  workflow_call:
    inputs:
      skaffoldBuildProfiles:
        type: string
        description: Comma seperated list of Skaffold profile(s) to use for building container(s).
        default: ""
        
      skaffoldBuildModules:
        type: string
        description: Comma seperated list of Skaffold modules(s) to use for building container(s).
        default: "app"

      submodules:
        type: string
        description: "`true` to checkout submodules or `recursive` to recursively checkout submodules."
        default: "false"

      deployRepo:
        type: string
        description: >
          Name of the deploy repo. By default this is just the name of the source repo with `-deploy` appended to it."
        default: ""

      secretsExposedToSkaffold:
        type: string
        description: >
          Comma seperated list of secrets to expose as environment variables to skaffold build.
          This can be used to inject any secrets needed to build the docker container.
        default: ""

      baseKustomizationPath:
        type: string
        description: >
          Path to the base kustomization
        default: "k8s/base"

jobs:
  container:
    runs-on: ubuntu-latest
    concurrency:
      group: cd-container

    permissions:
      packages: write
      contents: read

    env:
      REGISTRY: ghcr.io

    if: github.event_name == 'push' || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: ${{ inputs.submodules }}

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            accept-flake-config = true

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache/restore skaffold
        uses: actions/cache@v3
        with:
          path: ~/.skaffold/
          key: skaffold-${{ github.sha }}
          restore-keys: |
            skaffold-

      - name: Build and push container image
        id: skaffold
        env:
          SKAFFOLD_BUILDX_ARGS: "--cache-to type=gha,mode=max,ignore-error=true --cache-from type=gha"
        run: |-
          # Export select secrets
          exposedSecrets=$(jq -r --null-input --arg toExpose '${{ inputs.secretsExposedToSkaffold }}' --argjson secrets '${{ toJSON(secrets) }}' '$toExpose | split(",") | map(gsub("^\\s+|\\s+$";""))[] | select($secrets[.] != null) | "\(.)=\($secrets[.])"')

          if test -n "$exposedSecrets"; then
            export $exposedSecrets
          fi
          
          nix develop --impure --command skaffold build -m '${{ inputs.skaffoldBuildModules }}' -p '${{ inputs.skaffoldBuildProfiles }}' --file-output built-images.json --default-repo '${{ env.REGISTRY }}/${{ github.repository }}'

      - name: Upload Skaffold build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: skaffold-build
          path: built-images.json

  update:
    if: github.event_name == 'push' || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v'))

    env:
      deployOrgRepo: ${{ (inputs.deployRepo && format('{0}/{1}', github.repository_owner, inputs.deployRepo)) || format('{0}-deploy', github.repository) }}
    runs-on: ubuntu-latest
    needs: container
    concurrency:
      group: cd-update

    steps:
      - name: Get a token as lco-deploy-bot
        uses: actions/create-github-app-token@v1
        id: lco-deploy-bot
        with:
          app-id: ${{ secrets.LCO_DEPLOY_BOT_APP_ID }}
          private-key: ${{ secrets.LCO_DEPLOY_BOT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          
      - name: Get GitHub App User ID
        id: lco-deploy-bot-id
        run: echo "user-id=$(gh api "/users/${{ steps.lco-deploy-bot.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.lco-deploy-bot.outputs.token }}
          
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            accept-flake-config = true

      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Configure Git to use lco-deploy-bot token
        run: |
          git config --global url."https://x-access-token:${{ steps.lco-deploy-bot.outputs.token }}@github.com".insteadOf "https://github.com"

      - name: Download Skaffold build artifacts
        uses: actions/download-artifact@v4
        with:
          name: skaffold-build

      - name: Gather commit/PR metadata
        id: common
        uses: actions/github-script@v7
        env:
          botName: "${{ steps.lco-deploy-bot.outputs.app-slug }}[bot]"
          botId: "${{ steps.lco-deploy-bot-id.outputs.user-id }}"
        with:
          script: |
            const botName = process.env.botName;
            const botId = process.env.botId;
            const botEmail = `${botId}+${botName}@users.noreply.github.com`;

            const coAuthors = [];
            
            let prCommitTitle;

            const prCommitBodyElms = [];
            const prBodyElms = [];
            const prAssignees = [];

            if (context.payload.sender.type === "User") {
              const login = context.payload.sender.login;
              prAssignees.push(login);

               const { user } = await github.graphql(
                `query($login: String!) {
                  user(login: $login){
                    name
                  }
                }`,
                {
                  login: login,
                }
              );

              coAuthors.push([`${user.name || login}`, `${context.payload.sender.id}+${login}@users.noreply.github.com`]);
            }

            const ownerRepo = `${context.repo.owner}/${context.repo.repo}`;

            if (context.eventName === "release") {
              const { repository } = await github.graphql(
                `query($owner: String!, $repo: String!, $tagName: String!) {
                  repository(owner: $owner, name: $repo){
                    release(tagName: $tagName) {
                      name
                      tagName
                      author {
                        login
                        name
                        databaseId
                      }
                    }
                  }
                }`,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tagName: context.payload.release.tag_name
                }
              );

              const release = repository.release;

              prCommitTitle = `release: ${release.name}`;

              coAuthors.push([`${release.author.name || release.author.login}`, `${release.author.databaseId}+${release.author.login}@users.noreply.github.com`]);

              const releaseId = `${ownerRepo}/${release.tagName}`;
              const releaseNotesTemplate = `{{ githubRelease "${releaseId}" | expandGithubLinks "${ownerRepo}" }}`;

              prCommitBodyElms.push(releaseNotesTemplate);
              prBodyElms.push(releaseNotesTemplate);
            } else {
              const { repository } = await github.graphql(
                `query($owner: String!, $repo: String!, $sha: GitObjectID!) {
                  repository(owner: $owner, name: $repo){
                    object(oid: $sha) {
                      ... on Commit {
                        commitUrl
                        message
                        messageBody
                        messageHeadline
                        committer {
                          name
                          email
                          user {
                            login
                            databaseId
                          }
                        }
                        author {
                          user {
                            login
                          }
                        }
                        authors(first: 15) {
                          nodes {
                            name
                            email
                            user {
                              login
                              databaseId
                            }
                          }
                        }
                      }
                    }
                  }
                }`,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                }
              );
              const commit = repository.object;
              const commitMessage = commit.message;
              const commitSubject = commit.messageHeadline;
              const commitBody = commit.messageBody;
              
              const commitUrl = commit.commitUrl;

              core.exportVariable("_commitSubjectRaw", commitSubject);
              prCommitTitle = `{{ env "_commitSubjectRaw" | expandGithubLinks "${ownerRepo}" }}`;

              if (commit.author?.user !== null) {
                prAssignees.push(commit.author.user.login);
              }

              const coAuthorForGitActor = (x) => {
                const name = `${x.name || x.user?.login || "Unknown"}`;
                let email;
                
                if (x.user != null) {
                  email = `${x.user.databaseId}+${x.user.login}@users.noreply.github.com`;
                } else {
                  email = x.email || "";
                }
                return [`${name}`, `${email}`];
              };

              coAuthors.push(...commit.authors.nodes.map(coAuthorForGitActor));
              coAuthors.push(coAuthorForGitActor(commit.committer));

              core.exportVariable("_commitBodyRaw", commitBody);

              const bodyTemplate = `{{ env "_commitBodyRaw" | expandGithubLinks "${ownerRepo}" }}`;

              prCommitBodyElms.push(`Source-commit: ${commitUrl}`, bodyTemplate);
              prBodyElms.push(`Source-commit: ${commitUrl}`, bodyTemplate);
            }

            const seenAuthors = new Set();
            const coAuthoredBy = coAuthors.filter(x => {
              if (seenAuthors.has(x[1])) {
                return false;
              }

              seenAuthors.add(x[1]);
              return true;
            }).map(x => `Co-authored-by: ${x[0]} <${x[1]}>`).join("\n");

            prCommitBodyElms.push(coAuthoredBy);

            prCommitBody = prCommitBodyElms.filter(x => x).join("\n\n");
            prBody = prBodyElms.filter(x => x).join("\n<br>\n");

            core.exportVariable("botName", botName);
            core.exportVariable("botEmail", botEmail);
            core.exportVariable("prCommitTitle", prCommitTitle);
            core.exportVariable("prCommitBody", prCommitBody);
            core.exportVariable("prBody", prBody);
            core.exportVariable("prAssignees", [...new Set(prAssignees.filter(x => !x.includes("[bot]")))].join(","));

      - name: Create & merge staging PR
        run: |
          cat <<- 'EOF' > update.sh
            set -xe
            
            pushd "$DEVENV_ROOT"

            pushd staging/

            # Update container images
            pushd cd-set-images/
            jq -r '.builds[] | "\(.imageName)=\(.tag)"' "${{ github.workspace }}/built-images.json" | xargs -L1 kustomize edit set image
            popd

            # Copy over base
            rm -rf base/
            kpt pkg get https://github.com/${{ github.repository }}/${{ inputs.baseKustomizationPath }}@${{ github.sha }} base
            popd

            # Render kustomization
            kustomize build staging/ --output output/staging/manifest.yaml
            popd
            
          EOF
          
          nix run github:LCOGT/devenv-k8s#octopilot -- \
            --fail-on-error --log-level debug \
            --github-auth-method app \
            --github-app-id '${{ secrets.LCO_DEPLOY_BOT_APP_ID }}' \
            --github-installation-id '${{ secrets.LCO_DEPLOY_BOT_APP_INSTALL_ID }}' \
            --github-privatekey '${{ secrets.LCO_DEPLOY_BOT_APP_PRIVATE_KEY }}' \
            \
            --repo '${{ env.deployOrgRepo }}' \
            \
            --update 'exec(cmd=nix,args=develop --impure --command bash `${{ github.workspace }}/update.sh`)' \
            \
            --git-branch-prefix 'octopilot-staging-' \
            --git-author-name "$botName" \
            --git-author-email "$botEmail" \
            --git-committer-name "$botName" \
            --git-committer-email "$botEmail" \
            --git-commit-title "staging: $prCommitTitle" \
            --git-commit-body "$prCommitBody" \
            --git-commit-footer '' \
            \
            --pr-base-branch main \
            --pr-labels octopilot,staging \
            --pr-assignees "$prAssignees" \
            --pr-title "staging: $prCommitTitle" \
            --pr-body "$prBody" \
            --pr-merge \
            --pr-merge-auto \
            --pr-merge-auto-wait \
            --pr-merge-method squash \
            --pr-merge-commit-title "$prCommitTitle" \
            --pr-merge-commit-message "$prCommitBody" \
            --output-results staging-pr.json

      - name: Annotate w/ staging PR
        uses: actions/github-script@v7
        with:
          script: |
            const { readFile } = require("fs/promises");
            const data = JSON.parse(await readFile("staging-pr.json", "utf8"));

            const pr = data.repos[0].pr;
            const description = `Staging deploy PR #${pr.number}`;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "success",
              context: "cd/staging/pr",
              description: description,
              target_url: pr.url
            });

            core.summary.addLink(description, pr.url);
            core.summary.write();

      - name: Get staging PR metadata
        if: github.event_name == 'release'
        id: staging-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.lco-deploy-bot.outputs.token }}
          script: |
            const { readFile } = require("fs/promises");
            const data = JSON.parse(await readFile("staging-pr.json", "utf8"));

            const repo = data.repos[0];

            const pr_number = repo.pr.number;

            const pr = await github.rest.pulls.get({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: pr_number,
            });

            const sha = pr.data.merge_commit_sha;

            core.setOutput("sha", sha);

      - name: Create prod PR
        if: github.event_name == 'release'
        run: |
          nix run github:LCOGT/devenv-k8s#octopilot -- \
            --fail-on-error --log-level debug \
            --github-auth-method app \
            --github-app-id '${{ secrets.LCO_DEPLOY_BOT_APP_ID }}' \
            --github-installation-id '${{ secrets.LCO_DEPLOY_BOT_APP_INSTALL_ID }}' \
            --github-privatekey '${{ secrets.LCO_DEPLOY_BOT_APP_PRIVATE_KEY }}' \
            \
            --repo '${{ env.deployOrgRepo }}' \
            \
            --update 'exec(cmd=nix,args=develop --impure --command cd-update-prod `${{ steps.staging-pr.outputs.sha }}`)' \
            \
            --git-branch-prefix 'octopilot-prod-' \
            --git-author-name "$botName" \
            --git-author-email "$botEmail" \
            --git-committer-name "$botName" \
            --git-committer-email "$botEmail" \
            --git-commit-title "prod: $prCommitTitle" \
            --git-commit-body "$prCommitBody" \
            --git-commit-footer '' \
            \
            --pr-base-branch main \
            --pr-labels octopilot,prod \
            --pr-assignees "$prAssignees" \
            --pr-title "prod: $prCommitTitle" \
            --pr-body "$prBody" \
            --output-results prod-pr.json

      - name: Annotate w/ prod PR
        uses: actions/github-script@v7
        if: github.event_name == 'release'
        with:
          script: |
            const { readFile } = require("fs/promises");
            const data = JSON.parse(await readFile("prod-pr.json", "utf8"));

            const pr = data.repos[0].pr;
            const description = `Prod deploy PR #${pr.number}`;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "success",
              context: "cd/prod/pr",
              description: description,
              target_url: pr.url
            });

            core.summary.addLink(description, pr.url);
            core.summary.write();
